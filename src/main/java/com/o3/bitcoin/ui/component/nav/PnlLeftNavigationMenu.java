/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.o3.bitcoin.ui.component.nav;

import com.o3.bitcoin.model.Config;
import com.o3.bitcoin.model.manager.ConfigManager;
import com.o3.bitcoin.ui.ApplicationUI;
import com.o3.bitcoin.ui.DirectionRatio;
import com.o3.bitcoin.ui.ScaleDescriptor;
import com.o3.bitcoin.ui.dialogs.YesNoDialog;
import com.o3.bitcoin.util.ResourcesProvider;
import com.o3.bitcoin.util.ResourcesProvider.Colors;
import com.o3.bitcoin.util.ResourcesProvider.Dimensions;
import com.o3.bitcoin.util.Utils;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import javax.swing.JOptionPane;

/**
 *
 * @author
 */

/**
 * <p>Class that creates left navigation menu ui </p>
*/
public class PnlLeftNavigationMenu extends javax.swing.JPanel {

    /**
     * Creates new form PnlNavigationMenu
     */
    public PnlLeftNavigationMenu() {
        initComponents();
        mnuItemApplications.setVisible(true);
        mnuItemExchanges.setVisible(true);
    }
    
    @Override
    public Dimension getMinimumSize() {
        return new Dimension(Dimensions.BASE_NAV_MENU_WIDTH, Dimensions.BASE_NAV_MENU_HEIGHT);
    }
    
    @Override
    public Dimension getPreferredSize() {
        Dimension min = getMinimumSize();
        ScaleDescriptor sd = Utils.createScaleDescriptor(this);
        int width = min.width;
        int height = min.height;
        double directionRatio = sd != null ? sd.getValueByRatio(DirectionRatio.MIN_DIRECTION_RATIO) : 1.0;
        int preferredWidth = (int) ((double) width * directionRatio);
        int preferredHeight = (int) ((double) height * directionRatio);
        return new Dimension(preferredWidth, preferredHeight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        mnuItemDashboard = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("DASHBOARD", "o3", Colors.NAV_MENU_DASHBOARD_COLOR);
        mnuItemWallet = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("WALLET", "wallet", Colors.NAV_MENU_WALLET_COLOR);
        mnuItemExchanges = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("EXCHANGES", "exchange", Colors.NAV_MENU_EXCHANGES_COLOR);
        mnuItemApplications = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("APPLICATIONS", "application", Colors.NAV_MENU_APPLICATIONS_COLOR);
        pnlLeftNavMenuItem5 = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("SETTINGS", "settings", Colors.NAV_MENU_SETTINGS_COLOR);
        pnlLeftNavMenuItem6 = new com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem("ABOUT", "info", Colors.NAV_MENU_ABOUT_COLOR);
        pnlSpacer = new javax.swing.JPanel();

        setBackground(Colors.NAV_MENU_BG_COLOR);
        setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, Colors.NAV_MENU_RIGHT_BORDER_COLOR));
        setLayout(new java.awt.BorderLayout());

        pnlMain.setOpaque(false);
        pnlMain.setLayout(new javax.swing.BoxLayout(pnlMain, javax.swing.BoxLayout.PAGE_AXIS));

        mnuItemDashboard.setCaption("DASHBOARD");
        mnuItemDashboard.setEdgeColor(Colors.NAV_MENU_DASHBOARD_COLOR);
        mnuItemDashboard.setIconKey("o3");
        mnuItemDashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mnuItemDashboardMousePressed(evt);
            }
        });
        pnlMain.add(mnuItemDashboard);

        mnuItemWallet.setCaption("WALLET");
        mnuItemWallet.setEdgeColor(Colors.NAV_MENU_WALLET_COLOR);
        mnuItemWallet.setIconKey("wallet");
        mnuItemWallet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mnuItemWalletMousePressed(evt);
            }
        });
        pnlMain.add(mnuItemWallet);

        mnuItemExchanges.setCaption("EXCHANGES");
        mnuItemExchanges.setEdgeColor(Colors.NAV_MENU_EXCHANGES_COLOR);
        mnuItemExchanges.setIconKey("exchange");
        mnuItemExchanges.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuItemExchangesMouseClicked(evt);
            }
        });
        pnlMain.add(mnuItemExchanges);

        mnuItemApplications.setCaption("EXCHANGE");
        mnuItemApplications.setEdgeColor(Colors.NAV_MENU_APPLICATIONS_COLOR);
        mnuItemApplications.setIconKey("application");
        mnuItemApplications.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuItemApplicationsMouseClicked(evt);
            }
        });
        pnlMain.add(mnuItemApplications);

        pnlLeftNavMenuItem5.setCaption("SETTINGS");
        pnlLeftNavMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlLeftNavMenuItem5MousePressed(evt);
            }
        });
        pnlMain.add(pnlLeftNavMenuItem5);

        pnlLeftNavMenuItem6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlLeftNavMenuItem6MouseClicked(evt);
            }
        });
        pnlMain.add(pnlLeftNavMenuItem6);

        add(pnlMain, java.awt.BorderLayout.NORTH);

        pnlSpacer.setOpaque(false);
        pnlSpacer.setLayout(new java.awt.BorderLayout());
        add(pnlSpacer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void mnuItemDashboardMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuItemDashboardMousePressed
        ApplicationUI.get().showScreen(ApplicationUI.SCREEN_DASHBOARD);
    }//GEN-LAST:event_mnuItemDashboardMousePressed

    private void mnuItemWalletMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuItemWalletMousePressed
        ApplicationUI.get().showScreen(ApplicationUI.SCREEN_WALLET);
    }//GEN-LAST:event_mnuItemWalletMousePressed

    private void pnlLeftNavMenuItem5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLeftNavMenuItem5MousePressed
        ApplicationUI.get().showScreen(ApplicationUI.SCREEN_SETTINGS);
    }//GEN-LAST:event_pnlLeftNavMenuItem5MousePressed

    private void mnuItemExchangesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuItemExchangesMouseClicked
        // TODO add your handling code here:
        Config config = ConfigManager.config();
        String currentNetwork = config.getDefaultNetwork();
        if( currentNetwork.equals("MAINNET")) {
            mnuItemExchanges.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            ApplicationUI.get().showScreen(ApplicationUI.SCREEN_EXCHANGES);
            mnuItemExchanges.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
        else
        {
            YesNoDialog dialog = new YesNoDialog("Network Error","Exchanges works on MainNet network, please change bitcoin network from SETTINGS page", false);
            dialog.start();
        }
    }//GEN-LAST:event_mnuItemExchangesMouseClicked

    private void pnlLeftNavMenuItem6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLeftNavMenuItem6MouseClicked
        // TODO add your handling code here:
        ApplicationUI.get().showScreen(ApplicationUI.SCREEN_ABOUT);
    }//GEN-LAST:event_pnlLeftNavMenuItem6MouseClicked

    private void mnuItemApplicationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuItemApplicationsMouseClicked
        // TODO add our handling code here:
        Config config = ConfigManager.config();
        String currentNetwork = config.getDefaultNetwork();
        if( currentNetwork.equals("MAINNET")) {
            ApplicationUI.get().showScreen(ApplicationUI.SCREEN_APPLICATIONS);
        }
        else
        {
            YesNoDialog dialog = new YesNoDialog("Bitcoin Network Error","Applications works on MainNet network, please change bitcoin network from SETTINGS page", false);
            dialog.start();
        }    
    }//GEN-LAST:event_mnuItemApplicationsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem mnuItemApplications;
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem mnuItemDashboard;
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem mnuItemExchanges;
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem mnuItemWallet;
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem pnlLeftNavMenuItem5;
    private com.o3.bitcoin.ui.component.nav.PnlLeftNavMenuItem pnlLeftNavMenuItem6;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSpacer;
    // End of variables declaration//GEN-END:variables
}
