/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.o3.bitcoin.ui.dialogs.screens;

import com.o3.bitcoin.exception.ClientRuntimeException;
import com.o3.bitcoin.service.WalletService;
import com.o3.bitcoin.ui.ApplicationUI;
import com.o3.bitcoin.util.ResourcesProvider;
import org.bitcoinj.crypto.KeyCrypter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.spongycastle.crypto.params.KeyParameter;

/**
 *
 * @author
 */
public class PnlManageWalletPassphraseScreen extends javax.swing.JPanel {

    private static final Logger logger = LoggerFactory.getLogger(PnlManageWalletPassphraseScreen.class);
    private final WalletService service;
    private KeyParameter key;
    private boolean encrypted = false;

    /**
     * Creates new form PnlNewPaymentScreen
     *
     * @param service
     */
    public PnlManageWalletPassphraseScreen(WalletService service) {
        this.service = service;
        initComponents();
        encrypted = service.getWallet().isEncrypted();
        showPassphrase(encrypted);
    }

    private void showPassphrase(boolean encrypted) {
        lblOldPassphrase.setVisible(encrypted);
        txtOldPassphrase.setVisible(encrypted);
    }

    public void validateData() {
        String oldPass = txtOldPassphrase.getPassword() != null ? new String(txtOldPassphrase.getPassword()) : "";
        String newPass = txtNewPassphrase.getPassword() != null ? new String(txtNewPassphrase.getPassword()) : "";
        String confirmPass = txtConfirmPassphrase.getPassword() != null ? new String(txtConfirmPassphrase.getPassword()) : "";
        if (encrypted && oldPass.isEmpty()) {
            txtOldPassphrase.requestFocusInWindow();
            throw new IllegalArgumentException("Old Passphrase is required.");
        }
        if (newPass.isEmpty()) {
            txtNewPassphrase.requestFocusInWindow();
            throw new IllegalArgumentException("New Passphrase is required.");
        }
        if (confirmPass.isEmpty() || !confirmPass.equalsIgnoreCase(newPass)) {
            txtConfirmPassphrase.requestFocusInWindow();
            throw new IllegalArgumentException("Passphrases do not match.");
        }
        if ((confirmPass.length() < 5)) {
            txtConfirmPassphrase.requestFocusInWindow();
            throw new IllegalArgumentException("Passphrase must be at least 5 characters long");
        }
        try {
            if (encrypted) {
                KeyCrypter crypter = service.getWallet().getKeyCrypter();
                if (crypter != null) {
                    key = crypter.deriveKey(oldPass);
                }
                try {
                    if (key == null) {
                        throw new ClientRuntimeException("Wallet encryption is not supported.");
                    }
                    if (!service.getWallet().checkAESKey(key)) {
                        throw new ClientRuntimeException("Old Passphrase is incorrect.");
                    }
                } catch (Exception e) {
                    txtConfirmPassphrase.requestFocusInWindow();
                    throw e;
                }
            }
        } catch (Exception e) {
            logger.error("Validation Error: {}", e.toString(), e);
            throw new IllegalArgumentException(e.getMessage());
        }
    }

    public boolean changePassphrase() {
        try {
            validateData();
            _changePassphrase();
            return true;
        } catch (Exception e) {
            logger.error("Change Passphrase Error: {}", e.getMessage());
            ApplicationUI.get().showError(e.getMessage());
        }
        return false;
    }

    private void _changePassphrase() throws Exception {
        service.changeWalletPassword(new String(txtNewPassphrase.getPassword()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblOldPassphrase = new javax.swing.JLabel();
        txtOldPassphrase = new javax.swing.JPasswordField();
        lblNewPassphrase = new javax.swing.JLabel();
        txtNewPassphrase = new javax.swing.JPasswordField();
        lblConfirmPassphrase = new javax.swing.JLabel();
        txtConfirmPassphrase = new javax.swing.JPasswordField();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblOldPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblOldPassphrase.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblOldPassphrase.setText("Old Passphrase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblOldPassphrase, gridBagConstraints);

        txtOldPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtOldPassphrase.setPreferredSize(new java.awt.Dimension(275, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtOldPassphrase, gridBagConstraints);

        lblNewPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblNewPassphrase.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblNewPassphrase.setText("New Passphrase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblNewPassphrase, gridBagConstraints);

        txtNewPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtNewPassphrase.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtNewPassphrase, gridBagConstraints);

        lblConfirmPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblConfirmPassphrase.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblConfirmPassphrase.setText("Confirm Passphrase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblConfirmPassphrase, gridBagConstraints);

        txtConfirmPassphrase.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtConfirmPassphrase.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtConfirmPassphrase, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblConfirmPassphrase;
    private javax.swing.JLabel lblNewPassphrase;
    private javax.swing.JLabel lblOldPassphrase;
    private javax.swing.JPasswordField txtConfirmPassphrase;
    private javax.swing.JPasswordField txtNewPassphrase;
    private javax.swing.JPasswordField txtOldPassphrase;
    // End of variables declaration//GEN-END:variables
}
