/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.o3.bitcoin.ui.dialogs.screens;

import com.o3.bitcoin.hdwallet.util.WalletUtil;
import com.o3.bitcoin.model.manager.ConfigManager;
import com.o3.bitcoin.model.manager.WalletManager;
import com.o3.bitcoin.ui.ApplicationUI;
import com.o3.bitcoin.util.ResourcesProvider;
import javax.swing.JOptionPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author
 */

/**
 * <p>Class that creates UI form for Login dialog</p>
*/
public class PnlLoginScreen extends javax.swing.JPanel {

    private static final Logger logger = LoggerFactory.getLogger(PnlLoginScreen.class);

    /**
     * Creates new form PnlNewPaymentScreen
     *
     * @param service
     */
    public PnlLoginScreen() {
        initComponents();
        controls();
    }

    private void controls(){
        ConfigManager configManager = ConfigManager.get();
        if( configManager.getWalletsOnAllNetworks().size() > 0 )
        {
            lblConfirmPassword.setVisible(false);
            txtConfirmPassword.setVisible(false);
        }
        else
        {
            lblConfirmPassword.setVisible(true);
            txtConfirmPassword.setVisible(true);
        }
    }
    
    /**
     * function that validates ui form data
     */
    public void validateData() {
        ConfigManager configManager = ConfigManager.get();
        String password = txtApplicationPassword.getPassword() != null ? new String(txtApplicationPassword.getPassword()) : "";
        if (password.isEmpty()) {
            txtApplicationPassword.requestFocusInWindow();
            throw new IllegalArgumentException("Wallet Password is required.");
        }
        if( configManager.getWalletsOnAllNetworks().size() == 0 ){
            if ((password.length() < 5)) {
                txtApplicationPassword.requestFocusInWindow();
                throw new IllegalArgumentException("Password must be at least 5 characters long");
            }
            
            String confirmPassword = txtConfirmPassword.getPassword() != null ? new String(txtConfirmPassword.getPassword()) : "";
            if (confirmPassword.isEmpty()) {
                txtConfirmPassword.requestFocusInWindow();
                throw new IllegalArgumentException("Confirm Password is required.");
            }
            if( !confirmPassword.equals(password) )
            {
                throw new IllegalArgumentException("Wallet Password and Confirm Password not matched.");
            }
        }
    }

    /**
     * function to login user
     * @return whether user authenticated or not
     */
    public boolean login() {
        try {
            boolean isLoggedIn = false;
            validateData();
            String password = new String(txtApplicationPassword.getPassword());
            if( ConfigManager.get().getWalletsOnAllNetworks().size() == 0 ){// no wallet yet
                WalletManager.walletPassword = new String(txtApplicationPassword.getPassword());
                return true;
            }
            isLoggedIn = WalletUtil.verifyPassword(password);
            if( isLoggedIn )
                WalletManager.walletPassword = new String(txtApplicationPassword.getPassword());
            return isLoggedIn;
        } catch (Exception e) {
            logger.error("Login failed: {}", e.getMessage());
            throw new IllegalArgumentException(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblApplicationPassword = new javax.swing.JLabel();
        txtApplicationPassword = new javax.swing.JPasswordField();
        lblConfirmPassword = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblApplicationPassword.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblApplicationPassword.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblApplicationPassword.setText("Wallet Password:");
        lblApplicationPassword.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblApplicationPassword, gridBagConstraints);

        txtApplicationPassword.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtApplicationPassword.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtApplicationPassword, gridBagConstraints);

        lblConfirmPassword.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblConfirmPassword.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblConfirmPassword.setText("Confirm Password:");
        lblConfirmPassword.setMaximumSize(new java.awt.Dimension(120, 14));
        lblConfirmPassword.setMinimumSize(new java.awt.Dimension(120, 14));
        lblConfirmPassword.setPreferredSize(new java.awt.Dimension(120, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblConfirmPassword, gridBagConstraints);

        txtConfirmPassword.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtConfirmPassword.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtConfirmPassword, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblApplicationPassword;
    private javax.swing.JLabel lblConfirmPassword;
    private javax.swing.JPasswordField txtApplicationPassword;
    private javax.swing.JPasswordField txtConfirmPassword;
    // End of variables declaration//GEN-END:variables
}
