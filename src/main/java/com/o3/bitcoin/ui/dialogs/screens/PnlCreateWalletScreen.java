/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.o3.bitcoin.ui.dialogs.screens;

import com.github.sarxos.webcam.Webcam;
import com.o3.bitcoin.model.manager.ConfigManager;
import com.o3.bitcoin.util.seed.SeedGeneratorUtils;
import com.o3.bitcoin.model.manager.WalletManager;
import com.o3.bitcoin.ui.component.XButtonFactory;
import com.o3.bitcoin.ui.dialogs.DlgCreateWallet;
import com.o3.bitcoin.ui.dialogs.DlgScanQRCode;
import com.o3.bitcoin.ui.dialogs.DlgScanWalletSeed;
import com.o3.bitcoin.util.ResourcesProvider;
import com.o3.bitcoin.util.ResourcesProvider.Colors;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.bitcoinj.core.NetworkParameters;
import org.bitcoinj.params.MainNetParams;
import org.bitcoinj.params.TestNet3Params;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author
 */
/**
 * <p>
 * Class that creates UI form for Create Wallet dialog</p>
 */
public class PnlCreateWalletScreen extends javax.swing.JPanel {

    private static final Logger logger = LoggerFactory.getLogger(PnlCreateWalletScreen.class);
    private List<String> mnemonicCodes;

    DlgCreateWallet dlgCreateWallet;
    public static String confirmMnemonicCode = "";
    public static PnlCreateWalletScreen obj;

    /**
     * Creates new form PnlCreateWalletScreen
     *
     * @param dlgCreateWallet
     */
    public PnlCreateWalletScreen() {
        obj = new PnlCreateWalletScreen();
    }

    public PnlCreateWalletScreen(DlgCreateWallet dlgCreateWallet) {
        initComponents();
        this.dlgCreateWallet = dlgCreateWallet;
        setup();
    }

    /**
     * function to setup initial form ui
     */
    private void setup() {
        XButtonFactory.themedButton(btnBrowseLocation)
                .color(Color.WHITE)
                .background(Colors.NAV_MENU_DASHBOARD_COLOR);
        txtLocation.setText(WalletManager.DEFAULT_WALLET_ROOT);
        mnemonicCodes = new SeedGeneratorUtils().newSeedPhrase();
        rdoMainNet.setEnabled(!ConfigManager.config().walletsExist());
        rdoTestNet.setEnabled(!ConfigManager.config().walletsExist());
        rdoMainNet.setSelected(ConfigManager.config().getDefaultNetwork().toLowerCase().contains("main"));
        rdoTestNet.setSelected(!ConfigManager.config().getDefaultNetwork().toLowerCase().contains("main"));
        chkUseSeedActionPerformed(null);
        lblConfirmPassphrase.setVisible(false);
        txtConfirmPassphrase.setVisible(false);
        lblUserMessage.setVisible(true);
        txtWalletName.setText("wallet");
        //txtWalletName.setEditable(false);
        txtAccountName.setText("Account 1");
        //txtAccountName.setEditable(false);
        lblWalletName.setVisible(false);
        txtWalletName.setVisible(false);
        lblAccountName.setVisible(false);
        txtAccountName.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnGroupBitcoinNetwork = new javax.swing.ButtonGroup();
        lblWalletName = new javax.swing.JLabel();
        txtWalletName = new javax.swing.JTextField();
        lblLocation = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        btnBrowseLocation = new javax.swing.JButton();
        chkUseSeed = new javax.swing.JCheckBox();
        lblConfirmPassphrase = new javax.swing.JLabel();
        txtConfirmPassphrase = new javax.swing.JPasswordField();
        scrollpane = new javax.swing.JScrollPane();
        txtSeed = new javax.swing.JTextArea();
        lblSeed = new javax.swing.JLabel();
        lblUserMessage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        rdoMainNet = new javax.swing.JRadioButton();
        rdoTestNet = new javax.swing.JRadioButton();
        lblAccountName = new javax.swing.JLabel();
        txtAccountName = new javax.swing.JTextField();
        lblCreationDate = new javax.swing.JLabel();
        datePicker = new org.jdesktop.swingx.JXDatePicker();
        lblAccountNums = new javax.swing.JLabel();
        txtAccountNums = new javax.swing.JTextField();
        lblMnemonicCodes = new javax.swing.JLabel();
        lblQrcode = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblWalletName.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblWalletName.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblWalletName.setText("Wallet Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblWalletName, gridBagConstraints);

        txtWalletName.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        txtWalletName.setForeground(Color.BLACK);
        txtWalletName.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtWalletName, gridBagConstraints);

        lblLocation.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblLocation.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblLocation.setText("Location:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblLocation, gridBagConstraints);

        txtLocation.setEditable(false);
        txtLocation.setFont(ResourcesProvider.Fonts.BOLD_SMALL_FONT);
        txtLocation.setForeground(Color.BLACK);
        txtLocation.setText("<Location>");
        txtLocation.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtLocation, gridBagConstraints);

        btnBrowseLocation.setText("...");
        btnBrowseLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseLocationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        add(btnBrowseLocation, gridBagConstraints);

        chkUseSeed.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        chkUseSeed.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        chkUseSeed.setText("Use custom mnemonic codes as seed.");
        chkUseSeed.setOpaque(false);
        chkUseSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUseSeedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(chkUseSeed, gridBagConstraints);

        lblConfirmPassphrase.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblConfirmPassphrase.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblConfirmPassphrase.setText("Confirm Passphrase:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblConfirmPassphrase, gridBagConstraints);

        txtConfirmPassphrase.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        txtConfirmPassphrase.setForeground(Color.BLACK);
        txtConfirmPassphrase.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtConfirmPassphrase, gridBagConstraints);

        txtSeed.setEditable(false);
        txtSeed.setColumns(10);
        txtSeed.setFont(ResourcesProvider.Fonts.BOLD_LARGE_FONT);
        txtSeed.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        txtSeed.setLineWrap(true);
        txtSeed.setRows(5);
        txtSeed.setWrapStyleWord(true);
        scrollpane.setViewportView(txtSeed);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(scrollpane, gridBagConstraints);

        lblSeed.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblSeed.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblSeed.setText("Restore Wallet:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblSeed, gridBagConstraints);

        lblUserMessage.setFont(ResourcesProvider.Fonts.BOLD_SMALL_FONT);
        lblUserMessage.setForeground(ResourcesProvider.Colors.NAV_MENU_DASHBOARD_COLOR);
        lblUserMessage.setText("Backup Mnemonic Codes and Creation Date to secure place ");
        lblUserMessage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 15, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 5, 1, 5);
        add(lblUserMessage, gridBagConstraints);

        jLabel2.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        jLabel2.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        jLabel2.setText("Bitcoin Network:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel2, gridBagConstraints);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnGroupBitcoinNetwork.add(rdoMainNet);
        rdoMainNet.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        rdoMainNet.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        rdoMainNet.setText("Main Net");
        rdoMainNet.setOpaque(false);
        jPanel1.add(rdoMainNet);

        btnGroupBitcoinNetwork.add(rdoTestNet);
        rdoTestNet.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        rdoTestNet.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        rdoTestNet.setText("Test Net");
        rdoTestNet.setOpaque(false);
        jPanel1.add(rdoTestNet);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel1, gridBagConstraints);

        lblAccountName.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblAccountName.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblAccountName.setText("Account Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblAccountName, gridBagConstraints);

        txtAccountName.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        txtAccountName.setForeground(Color.BLACK);
        txtAccountName.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtAccountName, gridBagConstraints);

        lblCreationDate.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblCreationDate.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblCreationDate.setText("Creation Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblCreationDate, gridBagConstraints);

        datePicker.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        datePicker.setDate(new Date());
        datePicker.setFont(ResourcesProvider.Fonts.BOLD_SMALL_FONT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(datePicker, gridBagConstraints);

        lblAccountNums.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblAccountNums.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblAccountNums.setText("Number of Accounts:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblAccountNums, gridBagConstraints);

        txtAccountNums.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        txtAccountNums.setForeground(Color.BLACK);
        txtAccountNums.setText("1");
        txtAccountNums.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtAccountNums, gridBagConstraints);

        lblMnemonicCodes.setFont(ResourcesProvider.Fonts.DEFAULT_HEADING_FONT);
        lblMnemonicCodes.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblMnemonicCodes.setText("Mnemonic Codes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblMnemonicCodes, gridBagConstraints);

        lblQrcode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/qrcode.png"))); // NOI18N
        lblQrcode.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        lblQrcode.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblQrcode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblQrcodeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        add(lblQrcode, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void chkUseSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUseSeedActionPerformed
        txtSeed.setEditable(chkUseSeed.isSelected());
        if (!chkUseSeed.isSelected()) {
            lblUserMessage.setVisible(true);
            lblQrcode.setVisible(false);
            lblCreationDate.setVisible(true);
            datePicker.setVisible(true);
            lblAccountNums.setVisible(false);
            txtAccountNums.setVisible(false);
            txtSeed.setText("");
            for (String code : mnemonicCodes) {
                txtSeed.append(code + " ");
            }
            //Setiing Mnemonics code for backup
            confirmMnemonicCode = txtSeed.getText();
        } else {
            lblUserMessage.setVisible(false);
            lblQrcode.setVisible(true);
            lblCreationDate.setVisible(true);
            datePicker.setVisible(true);
            lblAccountNums.setVisible(true);
            txtAccountNums.setVisible(true);
            txtSeed.setText("");
        }
        dlgCreateWallet.pack();
    }//GEN-LAST:event_chkUseSeedActionPerformed

    public boolean isRestoreFromSeed() {
        return chkUseSeed.isSelected();
    }

    public Date getCreationDate() {
        return datePicker.getDate();
    }

    private void btnBrowseLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseLocationActionPerformed
        JFileChooser jc = new JFileChooser(new File(txtLocation.getText()));
        jc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jc.setMultiSelectionEnabled(false);
        int retval = jc.showOpenDialog(dlgCreateWallet);
        if (retval == JFileChooser.APPROVE_OPTION) {
            txtLocation.setText(jc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseLocationActionPerformed

    private void lblQrcodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblQrcodeMouseClicked
        // TODO add your handling code here:
        Webcam webcam = Webcam.getDefault();
        if (webcam == null) {
            JOptionPane.showMessageDialog(null, "FATAL ERROR: No Webcam found", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        webcam.close();

        lblQrcode.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                DlgScanWalletSeed dlgSWS = new DlgScanWalletSeed();
                dlgSWS.centerOnScreen();
                dlgSWS.setVisible(true);
                String qrCodeString = dlgSWS.getQRCode();
                if (qrCodeString != null) {
                    if (qrCodeString.contains("\n")) {
                        String mnemonicCodes = qrCodeString.substring(0, qrCodeString.indexOf("\n"));
                        String creationDate = qrCodeString.substring(qrCodeString.indexOf("\n") + 1);
                        try {
                            datePicker.setDate(new SimpleDateFormat("dd/MM/yyyy").parse(creationDate));
                            txtSeed.setText(mnemonicCodes);
                        } catch (ParseException pe) {
                            logger.error("Date parse exception ::" + pe.getMessage());
                        }
                    }
                }
            }
        });
    }//GEN-LAST:event_lblQrcodeMouseClicked

    public static void setDefaultCursor() {
        lblQrcode.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    public String getAccountName() {
        return new String(txtAccountName.getText());
    }

    public String getLocationPath() {
        return txtLocation.getText();
    }

    public String getWalletName() {
        return txtWalletName.getText();
    }

    public List<String> getMnemonicCodes() {
        List<String> codes = new ArrayList<>();
        if (chkUseSeed.isSelected()) {
            codes.addAll(Arrays.asList(txtSeed.getText().split(" ")));
        } else {
            codes = mnemonicCodes;
        }
        return codes;
    }

    public int getNumberOfAccounts() {
        return Integer.parseInt(txtAccountNums.getText());
    }

    /**
     * function that validate ui form data
     *
     * @return whether data validated or not
     */
    public boolean validateData() {
        if (txtWalletName.getText() == null || txtWalletName.getText().isEmpty()) {
            txtWalletName.requestFocusInWindow();
            throw new IllegalArgumentException("Wallet Name is required.");
        } else {
            if (!WalletManager.get().isUniqueWalletId(txtWalletName.getText().trim())) {
                txtWalletName.requestFocusInWindow();
                throw new IllegalArgumentException("A wallet with same name already exists.");
            }
        }
        String location = txtLocation.getText();
        if (location == null || location.isEmpty()) {
            btnBrowseLocation.requestFocusInWindow();
            throw new IllegalArgumentException("Wallet location is required.");
        }
        if (!location.endsWith(File.separator)) {
            location += File.separator;
        }
        if (WalletManager.get().isWalletLocationMarkedForDeletion(location + txtWalletName.getText().trim())) {
            btnBrowseLocation.requestFocusInWindow();
            throw new IllegalArgumentException("<html>Selected wallet location is marked for deletion. An application restart is required to make this location available for a new wallet.</html>");
        } /*else if (!WalletManager.get().isWalletLocationAvailable(location + txtWalletName.getText().trim())) {
            btnBrowseLocation.requestFocusInWindow();
            throw new IllegalArgumentException("Wallet location is already in use by another wallet.");
        }*/ else {
            location = location.trim();
            File path = new File(location);
            if (!path.exists()) {
                path.mkdirs();
                if (!path.exists()) {
                    btnBrowseLocation.requestFocusInWindow();
                    throw new IllegalArgumentException("Not a valid wallet location.");
                }
            }
        }
        if (!chkUseSeed.isSelected()) {
            String accountName = new String(txtAccountName.getText());
            if (accountName.isEmpty()) {
                txtAccountName.requestFocusInWindow();
                throw new IllegalArgumentException("Account Name is required.");
            }
        }
        if (chkUseSeed.isSelected()) {
            String seed = txtSeed.getText().trim();
            if (seed == null || seed.isEmpty()) {
                txtSeed.requestFocusInWindow();
                throw new IllegalArgumentException("Not a valid wallet seed.");
            } else {
                List<String> codes = Arrays.asList(seed.split(" "));
                if (!new SeedGeneratorUtils().isValid(codes)) {
                    txtSeed.requestFocusInWindow();
                    throw new IllegalArgumentException("Not a valid wallet seed.");
                }
            }
            int acctNums = 7;
            try {
                acctNums = Integer.parseInt(txtAccountNums.getText());
            } catch (Exception e) {
                throw new IllegalArgumentException("Not a valid Number of Accounts.");
            }
            if (acctNums > 2) {
                throw new IllegalArgumentException("Maximum 5 accounts can be restored.");
            }
        }
        return true;
    }

    public NetworkParameters getSelectedNetwork() {
        return rdoMainNet.isSelected() ? MainNetParams.get() : TestNet3Params.get();
    }

//    public static boolean ValidationData()
//    {
//     //PnlCreateWalletScreen obj=new PnlCreateWalletScreen();
//     return obj.validateData();   
//    }
//    
//    public static String getWalletNameStatic()
//    {
//        //PnlCreateWalletScreen obj=new PnlCreateWalletScreen();
//        return obj.getWalletName();
//    }
//    
//    public static String getLocationPathStatic()
//    {
//        //PnlCreateWalletScreen obj=new PnlCreateWalletScreen();
//        return obj.getLocationPath();
//    }
//    
//    public static List<String> getMnemonicCodesStatic()
//    {
//        //PnlCreateWalletScreen obj=new PnlCreateWalletScreen();
//        return obj.getMnemonicCodes(); 
//    }
//    
//    public static boolean isRestoreFromSeedStatic()
//    {
//        return obj.isRestoreFromSeed();
//    }
//    
//    public static NetworkParameters getSelectedNetworkStatic()
//    {
//        return obj.getSelectedNetwork();
//    }
//    
//    public static Date getCreationDateStatic()
//    {
//        return obj.getCreationDate();
//    }
//    
//    public static int getNumberOfAccountsStatic()
//    {
//        return obj.getNumberOfAccounts();
//    }
//    
//    public static String getAccountNameStatic()
//    {
//        return obj.getAccountName();
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseLocation;
    private javax.swing.ButtonGroup btnGroupBitcoinNetwork;
    private javax.swing.JCheckBox chkUseSeed;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAccountName;
    private javax.swing.JLabel lblAccountNums;
    private javax.swing.JLabel lblConfirmPassphrase;
    private javax.swing.JLabel lblCreationDate;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblMnemonicCodes;
    private static javax.swing.JLabel lblQrcode;
    private javax.swing.JLabel lblSeed;
    private javax.swing.JLabel lblUserMessage;
    private javax.swing.JLabel lblWalletName;
    private javax.swing.JRadioButton rdoMainNet;
    private javax.swing.JRadioButton rdoTestNet;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JTextField txtAccountName;
    private javax.swing.JTextField txtAccountNums;
    private javax.swing.JPasswordField txtConfirmPassphrase;
    private javax.swing.JTextField txtLocation;
    public javax.swing.JTextArea txtSeed;
    private javax.swing.JTextField txtWalletName;
    // End of variables declaration//GEN-END:variables
}
