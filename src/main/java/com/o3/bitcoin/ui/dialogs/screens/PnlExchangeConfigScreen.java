/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.o3.bitcoin.ui.dialogs.screens;

import com.o3.bitcoin.model.ExchangeConfig;
import com.o3.bitcoin.model.manager.ConfigManager;
import com.o3.bitcoin.model.manager.WalletManager;
import com.o3.bitcoin.ui.ApplicationUI;
import com.o3.bitcoin.ui.dialogs.BasicDialog;
import com.o3.bitcoin.util.ResourcesProvider;
import com.o3.bitcoin.util.Utils;
import javax.swing.DefaultComboBoxModel;
import org.bitcoinj.crypto.KeyCrypter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author
 */
public class PnlExchangeConfigScreen extends javax.swing.JPanel {
    
    private static final Logger logger = LoggerFactory.getLogger(PnlExchangeConfigScreen.class);
    private DefaultComboBoxModel<String> exchangesModel = new DefaultComboBoxModel<>();
    
    private BasicDialog dialog;
    
    /**
     * Creates new form PnlExchangeConfigScreen
     */
    public PnlExchangeConfigScreen(BasicDialog dialog) {
        initComponents();
        this.dialog = dialog;
        lblCustomerID.setVisible(false);
        txtCustomerID.setVisible(false);
        for(String exchange : ResourcesProvider.EXCHANGES)
            exchangesModel.addElement(exchange);
    }
    
    public void validateData() {
        if (txtApiKey == null || txtApiKey.getText().isEmpty()) {
            txtApiKey.requestFocusInWindow();
            throw new IllegalArgumentException("Api Key is required.");
        }
        if (txtApiSecret == null || txtApiSecret.getText().isEmpty()) {
            txtApiSecret.requestFocusInWindow();
            throw new IllegalArgumentException("Api Secret is required.");
        }
    }
    
    public String getSelectedExchange() {
        return cmbExchanges.getSelectedItem().toString();
    }
    
    public String getApiKey() {
        return txtApiKey.getText();
    }
    
    public String getApiSecret() {
        return txtApiSecret.getText();
    }
    
    public String getCustomerID() {
        if( txtCustomerID.isVisible())
            return txtCustomerID.getText();
        else
            return "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblExchange = new javax.swing.JLabel();
        cmbExchanges = new javax.swing.JComboBox();
        lblApiKey = new javax.swing.JLabel();
        txtApiKey = new javax.swing.JTextField();
        lblApiSecret = new javax.swing.JLabel();
        txtApiSecret = new javax.swing.JTextField();
        lblCustomerID = new javax.swing.JLabel();
        txtCustomerID = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        lblExchange.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblExchange.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblExchange.setText("Exchange :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblExchange, gridBagConstraints);

        cmbExchanges.setModel(exchangesModel);
        cmbExchanges.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbExchangesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cmbExchanges, gridBagConstraints);

        lblApiKey.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblApiKey.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblApiKey.setText("Api Key :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblApiKey, gridBagConstraints);

        txtApiKey.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtApiKey.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtApiKey, gridBagConstraints);

        lblApiSecret.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblApiSecret.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblApiSecret.setText("Api Secret :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblApiSecret, gridBagConstraints);

        txtApiSecret.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtApiSecret.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtApiSecret, gridBagConstraints);

        lblCustomerID.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        lblCustomerID.setForeground(ResourcesProvider.Colors.DEFAULT_HEADING_COLOR);
        lblCustomerID.setText("Customer ID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblCustomerID, gridBagConstraints);

        txtCustomerID.setFont(ResourcesProvider.Fonts.BOLD_MEDIUM_FONT);
        txtCustomerID.setPreferredSize(new java.awt.Dimension(275, 33));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtCustomerID, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbExchangesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbExchangesItemStateChanged
        // TODO add your handling code here:
        try {
            KeyCrypter keyCrypter = WalletManager.get().getCurentWalletService().getWallet().getKeyCrypter();
            ExchangeConfig exchangeConfig = ConfigManager.config().getExchange(cmbExchanges.getSelectedItem().toString());
            if( exchangeConfig != null ) {
                txtApiKey.setText(Utils.decryptData(keyCrypter, WalletManager.walletPassword, exchangeConfig.getApiKey()));
                txtApiSecret.setText(Utils.decryptData(keyCrypter, WalletManager.walletPassword, exchangeConfig.getApiSecret()));
                if(cmbExchanges.getSelectedItem().toString().equalsIgnoreCase("bitstamp"))
                {
                    System.out.println("Bitstamp Exchange");
                    lblCustomerID.setVisible(true);
                    txtCustomerID.setVisible(true);
                    txtCustomerID.setText(Utils.decryptData(keyCrypter, WalletManager.walletPassword, exchangeConfig.getCustomerID()));
                    dialog.pack();
                }
                else {
                    lblCustomerID.setVisible(false);
                    txtCustomerID.setVisible(false);
                    dialog.pack();
                }
                    
            }
            else {
                txtApiKey.setText("");
                txtApiSecret.setText("");
                txtCustomerID.setText("");
                
                if(cmbExchanges.getSelectedItem().toString().equalsIgnoreCase("bitstamp"))
                {
                    System.out.println("Bitstamp Exchange New");
                    lblCustomerID.setVisible(true);
                    txtCustomerID.setVisible(true);
                    dialog.pack();
                }
                else {
                    lblCustomerID.setVisible(false);
                    txtCustomerID.setVisible(false);
                    dialog.pack();
                }
                
                
                
            }
        }catch(Exception ex) {
            logger.error("Exchange data decryption failed: {}", ex.getMessage(), ex);
            ApplicationUI.get().showError(ex);
        }
            
    }//GEN-LAST:event_cmbExchangesItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbExchanges;
    private javax.swing.JLabel lblApiKey;
    private javax.swing.JLabel lblApiSecret;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblExchange;
    private javax.swing.JTextField txtApiKey;
    private javax.swing.JTextField txtApiSecret;
    private javax.swing.JTextField txtCustomerID;
    // End of variables declaration//GEN-END:variables
}
